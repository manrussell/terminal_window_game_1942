

/*
NOtes:
// probably easier to have seperate structs for each craft type and then switch..
but what about the bonus you can oick up, simple int counter for 10,000 loops or whatever


...
doing a malloc for the coords also do a malloc for the attributes? or seperate structs? .. quicker to change a pointer, bot h are pointers...
maybe for the drawing part 



goal one:
craft goes up/down/l/r
can use more than 1 type of craft
bonus: craft can fire

goal two
scenery and
collision detection
bonus basic generating algorithm for scenery

goal three:
same as one but for enemy




Jobs...
move missiles
draw missile



don't print the whole line if there if nothing on it, think baud rate, 80x50 = 4000, at 115200 baud = 11kb ?

seperate the updatexxpos() into, remove, update position and redraw
then make up different things easier
or...

main
{
	introduce new pieces 
	move all pieces, do collisions
	clear board
	redraw the board
}

structs
{	uint32 num_of_pieces
	uint32 xpos leg_1
	uint32 ypos leg_1
	uint32 xpos leg_2
	uint32 ypos leg_2
	...
	//otherstuff
}



draw_pieces_on_board(void *craft, void *missi, void *Enemies, void * scenery, void *explosions)
{
	//draw_user( (Spacecraft)craft )
	draw_user(Spacecraft *craft)
	{
		//what type of craft?
			switch(craft.type)
				case CRAFT_ONE
					gameBoard[craft->x_pos][craft->y_pos] = '^';
					break;
				default
					gotoxy(0,0);
 		 			printf("Error with craft type");
					break;
	}

	//draw missiles(Missile *missile)
	{
		switch(missile.type)
			case MISSILE_TYPE_ONE
				gameBoard[craft->x_pos][craft->y_pos] = '.';
				break;
			default
				gotoxy(1,0);
		 		printf("Error with missile type");
				break;
	}

	//draw_enemies()

	//drawe_explosions()

	//draw_scenery()
}

*/

/*
putch(13) = gotoxy(0, y)
putch(8)  = gotoxy(x-1, y)
*/
=======

/*
NOtes:
// probably easier to have seperate structs for each craft type and then switch..
but what about the bonus you can oick up, simple int counter for 10,000 loops or whatever


...
doing a malloc for the coords also do a malloc for the attributes? or seperate structs? .. quicker to change a pointer, bot h are pointers...
maybe for the drawing part 



goal one:
craft goes up/down/l/r
can use more than 1 type of craft
bonus: craft can fire

goal two
scenery and
collision detection
bonus basic generating algorithm for scenery

goal three:
same as one but for enemy




Jobs...
move missiles
draw missile



don't print the whole line if there if nothing on it, think baud rate, 80x50 = 4000, at 115200 baud = 11kb ?

seperate the updatexxpos() into, remove, update position and redraw
then make up different things easier
or...

main
{
	introduce new pieces 
	move all pieces, do collisions
	clear board
	redraw the board
}

structs
{	uint32 num_of_pieces
	uint32 xpos leg_1
	uint32 ypos leg_1
	uint32 xpos leg_2
	uint32 ypos leg_2
	...
	//otherstuff
}



draw_pieces_on_board(void *craft, void *missi, void *Enemies, void * scenery, void *explosions)
{
	//draw_user( (Spacecraft)craft )
	draw_user(Spacecraft *craft)
	{
		//what type of craft?
			switch(craft.type)
				case CRAFT_ONE
					gameBoard[craft->x_pos][craft->y_pos] = '^';
					break;
				default
					gotoxy(0,0);
 		 			printf("Error with craft type");
					break;
	}

	//draw missiles(Missile *missile)
	{
		switch(missile.type)
			case MISSILE_TYPE_ONE
				gameBoard[craft->x_pos][craft->y_pos] = '.';
				break;
			default
				gotoxy(1,0);
		 		printf("Error with missile type");
				break;
	}

	//draw_enemies()

	//drawe_explosions()

	//draw_scenery()
}

*/

/*
putch(13) = gotoxy(0, y)
putch(8)  = gotoxy(x-1, y)
*/
